# Array map function
let map = (arr, f) -> {
  let iterator = (arr, accumulated, index) -> {
    if len(arr) == 0:
      accumulated
    else {
      iterator(
        rest(arr),
        push(accumulated,
        f(first(arr))), index + 1
      )
    }
  }

  iterator(arr, [], 0)
}

# Array reduce function
let reduce = (arr, initial, f) -> {
  let iterator = (arr, result, index) -> {
    if len(arr) == 0:
      result
    else {
      iterator(
        rest(arr),
        f(result, first(arr)),
        index + 1
      )
    }
  }

  iterator(arr, initial, 0)
}

# Array filter function
let filter = (arr, f) -> {
  let iterator = (arr, accumulated, index) -> {
    if len(arr) == 0:
      accumulated
    else {
      let item = first(arr)

      accumulated =
        if f(item):
          push(accumulated, item)
        else
          accumulated

      iterator(rest(arr), accumulated, index + 1)
    }
  }

  iterator(arr, [], 0)
}

# Predicates
let square = el -> el * el
let sum = arr -> reduce(arr, 0, (initial, el) -> initial + el)
let greaterThenTwo = (el) -> el > 2

# Testing array
let array = [
  1, 2, 3,
  4, 5, 6
]

# Output
puts("Array squares:", map(array, square))
puts("Array sum:", sum(array))
puts("Only > 2:", filter(array, greaterThenTwo))
