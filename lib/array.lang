# Array map function
export let map = (arr, predicate) -> {
  let iterator = (arr, accumulated, index) -> {
    if len(arr) == 0:
      accumulated
    else {
      iterator(
        rest(arr),
        push(accumulated, predicate(first(arr))),
        index + 1
      )
    }
  }

  iterator(arr, [], 0)
}

# Array foreach function
export let foreach = (arr, predicate) -> {
  let iterator = (arr, index) -> {
    if len(arr) == 0 {
      return
    }
    else {
      predicate(first(arr), index)

      iterator(rest(arr), index + 1)
    }
  }

  iterator(arr, 0)
}

# Array reduce function
export let reduce = (arr, initial, predicate) -> {
  let iterator = (arr, result, index) -> {
    if len(arr) == 0:
      result
    else {
      iterator(
        rest(arr),
        predicate(result, first(arr), index),
        index + 1
      )
    }
  }

  iterator(arr, initial, 0)
}

# Array filter function
export let filter = (arr, predicate) -> {
  let iterator = (arr, accumulated, index) -> {
    if len(arr) == 0:
      accumulated
    else {
      let item = first(arr)

      accumulated = if predicate(item): push(accumulated, item) else accumulated

      iterator(rest(arr), accumulated, index + 1)
    }
  }

  iterator(arr, [], 0)
}


export let every = (arr, predicate) ->
  reduce(arr, true, (acc, item, index) -> acc && predicate(item, index))


export let some = (arr, predicate) ->
  reduce(arr, false, (acc, item, index) -> predicate(item, index) || acc)
